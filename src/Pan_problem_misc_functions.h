/*
 * CitcomCU is a Finite Element Code that solves for thermochemical
 * convection within a three dimensional domain appropriate for convection
 * within the Earth's mantle. Cartesian and regional-spherical geometries
 * are implemented. See the file README contained with this distribution
 * for further details.
 * 
 * Copyright (C) 1994-2005 California Institute of Technology
 * Copyright (C) 2000-2005 The University of Colorado
 *
 * Authors: Louis Moresi, Shijie Zhong, and Michael Gurnis
 *
 * For questions or comments regarding this software, you may contact
 *
 *     Luis Armendariz <luis@geodynamics.org>
 *     http://geodynamics.org
 *     Computational Infrastructure for Geodynamics (CIG)
 *     California Institute of Technology
 *     2750 East Washington Blvd, Suite 210
 *     Pasadena, CA 91007
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 2 of the License, or any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */


/***********************************************************************
 *                                                                     *
 * WARNING: This file is auto-generated by the script `prototypes.py'. *
 *                                                                     *
 * Since the function prototypes can be generated, you should modify   *
 * the function definitions instead. You can then use the script to    *
 * keep the headers up to date.                                        *
 *                                                                     *
 * You can add (almost) anything you want in the section between the   *
 * BEGIN and END comments and it will be preserved.  Anything outside  *
 * those comments will be overwritten in the next pass.                *
 *                                                                     *
 * Ignore this warning if you will be maintaining this file manually   *
 * from now on.                                                        *
 *                                                                     *
 ***********************************************************************/


#ifndef __PAN_PROBLEM_MISC_FUNCTIONS_H__
#define __PAN_PROBLEM_MISC_FUNCTIONS_H__

/** BEGIN **/
#include "element_definitions.h"
#include "global_defs.h"
/** END **/

/* Pan_problem_misc_functions.c */
int get_process_identifier(void);
void unique_copy_file(struct All_variables *E, char *name, char *comment);
void thermal_buoyancy(struct All_variables *E);
double SIN_D(double x);
double COT_D(double x);
void *Malloc1(int bytes, char *file, int line);
int read_previous_field(struct All_variables *E, float *field, char *name, char *abbr);
void fcopy_interpolating(struct All_variables *E, float *X, float *Z, float *Y, int nx, int nz, int ny, float *T, float *TT);
float cross2d(float x11, float x12, float x21, float x22, int D);
void field_arbitrary_rectangle_file(struct All_variables *E, int parse_and_apply, struct Rect *RECT, char *name, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
void field_arbitrary_rectangle(struct All_variables *E, struct Rect *RECT, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
void field_arbitrary_circle_file(struct All_variables *E, int parse_and_apply, struct Circ *CIRC, char *name, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
void field_arbitrary_circle(struct All_variables *E, struct Circ *CIRC, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
void field_arbitrary_harmonic_file(struct All_variables *E, int parse_and_apply, struct Harm *HARM, char *name, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
void field_arbitrary_harmonic(struct All_variables *E, struct Harm *HARM, float *field, int BC, unsigned int *bcbitf, unsigned int bcmask_on, unsigned int bcmask_off);
double myatan(double y, double x);

/* cproto command: /usr/bin/cproto -q -p -f 3 Pan_problem_misc_functions.c */
#endif
