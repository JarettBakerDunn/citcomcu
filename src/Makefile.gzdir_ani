#
#  Makefile for "CitcomCU" allowing considerable variations
#

#
#  NOTES:
#  1) Macro substitution is different for different version of make, for SGI,
#     CRAY, HP, etc. It seems necessary to go through and replace the
#     CEXT ... FOBJFLAG macros manually.
#
#  2) Put FLAGS=$(YOUR_MACHINE_FLAGS) chosen from the list that follows, add
#     machines, where necessary, try and find a better way than just defining
#     "const" to be null. 
#
##############################################################################
#	Individual Machine Variations
##############################################################################

#COMPRESS=/usr/bin/compress
COMPRESS=/bin/gzip
GMT_DIR = $(GMTHOME)
NETCDF_DIR = $(NETCDFHOME)
HC_DIR = ../../../hc-svn/
LIB_PATH= -L$(HC_DIR)/objects/x86_64/ -L$(GMT_DIR)/lib/ -L$(NETCDF_DIR)/lib/
LIB_LIST= -lz -lggrd -lhc -lgmt -lnetcdf



# use the expokit stuff?
EXPO_DEFINE = -DCITCOM_USE_EXPOKIT
EXPO_FILES = expokit/dgpadm.f
EXPO_LIBS = $(EXPO_OBJS) -llapack -lblas 


LIB= $(LIB_PATH) $(LIB_LIST) $(EXPO_LIBS)  -lm

DEFINES = -DUSE_GZDIR -DUSE_GGRD -DCITCOM_ALLOW_ANISOTROPIC_VISC \
	-I$(HC_DIR)/  $(EXPO_DEFINE) \
	 -I$(GMT_DIR)/include/ -I$(NETCDF_DIR)/include/\
	-DPREM_MODEL_FILE=\"$(PWD)/prem/prem.dat\"

###################################################################
#	Operating System Variables
###################################################################

CC=mpicc
F77=mpif77
CPP=


CEXT=c
FEXT=F   # which implies further action of cpp
OBJEXT=o
FOBJEXT=o
OBJFLAG=-c
FOBJFLAG=-c


LinuxFLAGS=
LinuxLDFLAGS=
#LinuxOPTIM=-g -O0 -Werror $(DEFINES)
#LinuxOPTIM=-O3 -mtune=core2 -Werror $(DEFINES)
LinuxOPTIM=-O2 -Werror $(DEFINES)

####################################
#PARAGON 
PARAGONFLAGS=-nx
PARAGONLDFLAGS=
PARAGONOPTIM=-O4
####################################

####################################################################
#	Choose the actual flags for your machine here ...
####################################################################

FLAGS= $(LinuxFLAGS) -DCOMPRESS_BINARY=\"$(COMPRESS)\"
LDFLAGS= $(LinuxLDFLAGS)
OPTIM= $(LinuxOPTIM)

#FLAGS= $(SOLARISFLAGS) -DCOMPRESS_BINARY=\"$(COMPRESS)\"
#LDFLAGS= $(SOLARISLDFLAGS)
#OPTIM= $(SOLARISOPTIM)

####################################################################
#	CitcomCU's files .....
####################################################################

CFILES= Advection_diffusion.c\
	Anisotropic_viscosity.c\
	Boundary_conditions.c\
	Citcom.c\
	Composition_adv.c\
	Construct_arrays.c\
	Convection.c\
	Drive_solvers.c\
	Element_calculations.c\
	Geometry_cartesian.c\
	General_matrix_functions.c\
	Global_operations.c\
	Stokes_flow_Incomp.c\
	Instructions.c\
	Nodal_mesh.c\
	Output.c\
	Pan_problem_misc_functions.c\
	Parallel_related.c\
	Parsing.c\
	Phase_change.c\
	Process_buoyancy.c\
	Process_velocity.c\
	Profiling.c\
	Shape_functions.c\
	Size_does_matter.c\
	Solver_multigrid.c\
	Solver_conj_grad.c\
	Sphere_harmonics.c\
	Topo_gravity.c\
	Viscosity_structures.c\
	Output_gzdir.c\
	Ggrd_handling.c



HEADER = element_definitions.h \
	 global_defs.h \
	 viscosity_descriptions.h \
	 anisotropic_viscosity.h \
	 advection.h \
	 prototypes.h



FFILES=$(EXPO_FILES) #Blas_lapack_interfaces.F

OBJFILES=$(CFILES:.c=.o) $(FFILES:.f=.o) 


####################################################################
# Makefile rules follow
####################################################################

default: citcom.mpi 

citcom.mpi: $(OBJFILES) $(HEADER) Makefile
	$(F77) $(OPTIM) $(FLAGS) $(LDFLAGS) -o citcom.mpi -nofor_main \
	$(OBJFILES)  $(FFTLIB)  $(LIB)

clean:
	rm -f $(OBJFILES)

clean-all:
	rm -f *.o citcom.mpi

smaller: 
	compress $(CFILES)

larger:
	uncompress $(CFILES)


####################################################################
# File dependencies follow
####################################################################

global_defs.h: viscosity_descriptions.h advection.h Convection_variables.h
		
# The following entries can probably be automated from $CFILES etc

Advection_diffusion.o: $(HEADER) Advection_diffusion.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Advection_diffusion.c

Anisotropic_viscosity.o: $(HEADER) Anisotropic_viscosity.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Anisotropic_viscosity.c
#
Boundary_conditions.o: $(HEADER) Boundary_conditions.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Boundary_conditions.c
#	
Citcom.o: $(HEADER) Citcom.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Citcom.c
#	
Composition_adv.o: $(HEADER) Composition_adv.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Composition_adv.c
#	
Construct_arrays.o: $(HEADER) Construct_arrays.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Construct_arrays.c
#	
Convection.o: $(HEADER) Convection.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Convection.c
#	
Drive_solvers.o: $(HEADER) Drive_solvers.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Drive_solvers.c
#	
Element_calculations.o: $(HEADER) Element_calculations.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Element_calculations.c

General_matrix_functions.o: $(HEADER) General_matrix_functions.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  General_matrix_functions.c
		
Geometry_cartesian.o: $(HEADER) Geometry_cartesian.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Geometry_cartesian.c
	
Global_operations.o: $(HEADER) Global_operations.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Global_operations.c
	
Instructions.o: $(HEADER) Instructions.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Instructions.c
	
Nodal_mesh.o: $(HEADER) Nodal_mesh.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Nodal_mesh.c

Output.o: $(HEADER) Output.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Output.c
	
Pan_problem_misc_functions.o: $(HEADER)  Pan_problem_misc_functions.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Pan_problem_misc_functions.c
		
Parallel_related.o: $(HEADER) Parallel_related.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Parallel_related.c

Parsing.o: $(HEADER) Parsing.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Parsing.c

Phase_change.o: $(HEADER) Phase_change.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Phase_change.c

Process_velocity.o: $(HEADER) Process_velocity.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Process_velocity.c

Process_buoyancy.o: $(HEADER) Process_buoyancy.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Process_buoyancy.c
			
Profiling.o: $(HEADER) Profiling.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Profiling.c
	
Shape_functions.o: $(HEADER) Shape_functions.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Shape_functions.c
	
Size_does_matter.o: $(HEADER) Size_does_matter.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Size_does_matter.c
	
Solver_conj_grad.o: $(HEADER) Solver_conj_grad.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Solver_conj_grad.c
	
Solver_multigrid.o: $(HEADER) Solver_multigrid.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Solver_multigrid.c

Sphere_harmonics.o: $(HEADER) Sphere_harmonics.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Sphere_harmonics.c

Stokes_flow_Incomp.o: $(HEADER) Stokes_flow_Incomp.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Stokes_flow_Incomp.c
	
Topo_gravity.o: $(HEADER) Topo_gravity.c 
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Topo_gravity.c

Viscosity_structures.o: $(HEADER) Viscosity_structures.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Viscosity_structures.c

Blas_lapack_interfaces.f: Blas_lapack_interfaces.F
	$(CPP) $(OPTIM) -P Blas_lapack_interfaces.F Blas_lapack_interfaces.f
	$(F77) $(OPTIM) $(FOPTIM) -c Blas_lapack_interfaces.f

Output_gzdir.o: $(HEADER) Output_gzdir.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Output_gzdir.c


Ggrd_handling.o: $(HEADER) Ggrd_handling.c
	$(CC) $(OPTIM) $(FLAGS)  $(OBJFLAG)  Ggrd_handling.c

expokit/dgpadm.o: expokit/dgpadm.f $(HEADER)
	$(F77) $(OPTIM) $(FOPTIM) -c expokit/dgpadm.f -o expokit/dgpadm.o
